{"version":3,"sources":["utils/GridUtils.jsx","Components/Cell.js","Components/Row.js","utils/data.jsx","Components/EasyGrid.jsx","Components/MediumGrid.jsx","Components/HardGrid.jsx","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["gridChecker","row","column","number","matrix","Math","floor","a","b","columnChecker","rowChecker","module","exports","sleep","ms","Promise","resolve","setTimeout","visualizer","staticValues","String","x","Cell","state","backgroundColor","cssSelector","r","c","bWidthB","bStyleB","bWidthR","bStyleR","bStyleT","bWidthT","bStyleL","bWidthL","borderBottomWidth","borderRightWidth","borderBottomStyle","borderStyleRight","borderTopWidth","borderTopStyle","borderLeftWidth","borderLeftStyle","borderColor","element","this","props","value","rIndex","cIndex","className","style","elementValue","React","Component","Row","map","key","matrices","window","$flag","GridNew","speed","button","recursion","newMatrix","setState","handleChange","e","target","startSolving","col","JSON","parse","stringify","alert","prevProps","level","setStaticValues","length","newString","startmatrix","Fragment","textAlign","display","type","min","max","defaultValue","onChange","disabled","onClick","rows","Navbar","buttonSelector","to","exact","path","component","EasyGrid","MediumGrid","HardGrid","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d0f22b0.chunk.js","sourcesContent":["const gridChecker = (row, column, number, matrix) => {\r\n  row = Math.floor(row / 3) * 3;\r\n  column = Math.floor(column / 3) * 3;\r\n  for (let a = row; a < row + 3; a++) {\r\n    for (let b = column; b < column + 3; b++) {\r\n      if (number === matrix[a][b]) return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst columnChecker = (column, number, matrix) => {\r\n  for (let a = 0; a < 9; a++) {\r\n    if (number === matrix[a][column]) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst rowChecker = (row, number, matrix) => {\r\n  for (let a = 0; a < 9; a++) {\r\n    if (number === matrix[row][a]) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst sleep = (ms) => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n\r\nconst visualizer = (row, column, matrix, staticValues) => {\r\n  var temp = String(row) + String(column);\r\n  if (temp in staticValues) {\r\n    return -1;\r\n  } else {\r\n    for (let x = matrix[row][column] + 1; x < 10; x++) {\r\n      if (\r\n        gridChecker(row, column, x, matrix) &&\r\n        rowChecker(row, x, matrix) &&\r\n        columnChecker(column, x, matrix)\r\n      ) {\r\n        return x;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  gridChecker,\r\n  columnChecker,\r\n  rowChecker,\r\n  sleep,\r\n  visualizer,\r\n};\r\n","import React from \"react\";\r\nimport \"../style/Cell.css\";\r\n\r\nclass Cell extends React.Component {\r\n  state = {\r\n    backgroundColor: \"\",\r\n  };\r\n\r\n  elementValue(element) {\r\n    if (element !== 0) return element;\r\n    return \"  \";\r\n  }\r\n  cssSelector = (r, c, staticValues, backgroundColor) => {\r\n    var temp = String(r) + String(c);\r\n    var bgColor = \"\";\r\n    var bWidthB = \"1px\";\r\n    var bStyleB = \"\";\r\n    var bWidthR = \"1px\";\r\n    var bStyleR = \"\";\r\n    var bStyleT = \"\";\r\n    var bWidthT = \"1px\";\r\n    var bStyleL = \"\";\r\n    var bWidthL = \"1px\";\r\n    if (r === 2 || r === 5 || r === 8) {\r\n      bWidthB = \"5px\";\r\n      bStyleB = \"solid\";\r\n    }\r\n    if (r === 0) {\r\n      bStyleT = \"solid\";\r\n      bWidthT = \"5px\";\r\n    }\r\n    if (c === 0) {\r\n      bStyleL = \"solid\";\r\n      bWidthL = \"5px\";\r\n    }\r\n    if (c === 2 || c === 5 || c === 8) {\r\n      bWidthR = \"5px\";\r\n      bStyleR = \"solid\";\r\n    }\r\n    if (temp in staticValues) {\r\n      bgColor = \"#A9A9A9\";\r\n    } else {\r\n      bgColor = backgroundColor;\r\n    }\r\n\r\n    return {\r\n      backgroundColor: bgColor,\r\n      borderBottomWidth: bWidthB,\r\n      borderRightWidth: bWidthR,\r\n      borderBottomStyle: bStyleB,\r\n      borderStyleRight: bStyleR,\r\n      borderTopWidth: bWidthT,\r\n      borderTopStyle: bStyleT,\r\n      borderLeftWidth: bWidthL,\r\n      borderLeftStyle: bStyleL,\r\n      borderColor: \"green\",\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { backgroundColor, value, rIndex, cIndex, staticValues } = this.props;\r\n    return (\r\n      <td\r\n        className=\"align-middle text-center h3 font-weight-bold\"\r\n        style={this.cssSelector(rIndex, cIndex, staticValues, backgroundColor)}\r\n      >\r\n        {this.elementValue(value)}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport \"../style/Row.css\";\r\nimport Cell from \"./Cell\";\r\n\r\nclass Row extends React.Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        {this.props.row.map((element, c) => (\r\n          <Cell\r\n            key={c}\r\n            value={element}\r\n            backgroundColor={this.props.backgroundColor}\r\n            rIndex={this.props.rIndex}\r\n            cIndex={c}\r\n            staticValues={this.props.staticValues}\r\n          />\r\n        ))}\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Row;\r\n","export const matrices = {\r\n  easy: [\r\n    [0, 0, 3, 0, 9, 4, 1, 6, 7],\r\n    [4, 7, 9, 6, 1, 0, 0, 0, 0],\r\n    [5, 0, 0, 0, 7, 0, 0, 9, 0],\r\n    [3, 2, 0, 9, 0, 0, 0, 7, 0],\r\n    [1, 0, 0, 0, 0, 8, 0, 0, 5],\r\n    [0, 5, 7, 2, 0, 1, 0, 0, 3],\r\n    [0, 0, 5, 4, 0, 0, 7, 0, 6],\r\n    [0, 0, 2, 3, 0, 6, 4, 0, 0],\r\n    [0, 3, 0, 0, 8, 0, 2, 5, 0],\r\n  ],\r\n\r\n  medium: [\r\n    [0, 1, 0, 5, 0, 0, 0, 0, 4],\r\n    [0, 0, 0, 0, 3, 0, 0, 5, 0],\r\n    [0, 4, 0, 0, 0, 0, 6, 7, 1],\r\n    [0, 0, 6, 0, 7, 0, 0, 0, 0],\r\n    [0, 2, 0, 0, 9, 5, 0, 0, 0],\r\n    [4, 0, 0, 0, 0, 0, 0, 2, 0],\r\n    [0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n    [1, 0, 0, 0, 0, 6, 7, 0, 8],\r\n    [0, 0, 9, 0, 0, 0, 0, 0, 6],\r\n  ],\r\n\r\n  hard: [\r\n    [0, 3, 9, 2, 0, 0, 7, 1, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 7, 0, 0, 0, 0, 8, 0, 0],\r\n    [1, 0, 5, 0, 3, 0, 0, 0, 0],\r\n    [0, 9, 0, 6, 0, 0, 0, 3, 0],\r\n    [0, 8, 0, 0, 7, 5, 9, 0, 0],\r\n    [0, 5, 0, 0, 0, 6, 0, 0, 0],\r\n    [9, 0, 1, 0, 0, 7, 4, 0, 0],\r\n    [0, 0, 8, 9, 0, 0, 0, 0, 2],\r\n  ],\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Row from \"../Components/Row\";\r\nimport { matrices } from \"../utils/data\";\r\nimport {\r\n  gridChecker,\r\n  columnChecker,\r\n  rowChecker,\r\n  sleep,\r\n  visualizer,\r\n} from \"../utils/GridUtils.jsx\";\r\n\r\nwindow.$flag = false;\r\n\r\nconst WHITE_COLOR = \"#FFFFFF\";\r\n\r\nclass GridNew extends Component {\r\n  state = {\r\n    matrix: [[]],\r\n    backgroundColor: \"\",\r\n    staticValues: {},\r\n    speed: 25,\r\n    button: false,\r\n  };\r\n\r\n  recursion = (row, column) => {\r\n    var rowColIndex = String(row) + String(column);\r\n    if (rowColIndex in this.state.staticValues) {\r\n      this.recursion(row, column + 1);\r\n    } else {\r\n      if (row < 9 && column < 9) {\r\n        for (let x = 1; x < 10; x++) {\r\n          if (\r\n            gridChecker(row, column, x, this.state.matrix) &&\r\n            rowChecker(row, x, this.state.matrix) &&\r\n            columnChecker(column, x, this.state.matrix)\r\n          ) {\r\n            let newMatrix = [...this.state.matrix];\r\n            newMatrix[row][column] = x;\r\n            this.setState({ matrix: newMatrix });\r\n            this.recursion(row, column + 1);\r\n          }\r\n        }\r\n        if (!window.$flag) {\r\n          let newMatrix = [...this.state.matrix];\r\n          newMatrix[row][column] = 0;\r\n          this.setState({ matrix: newMatrix });\r\n        }\r\n      } else if (column >= 9) {\r\n        this.recursion(row + 1, 0);\r\n      } else {\r\n        window.$flag = true;\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ speed: e.target.value });\r\n  };\r\n\r\n  startSolving = async () => {\r\n    this.setState({ button: true });\r\n    let row = 0;\r\n    let col = 0;\r\n\r\n    while (true) {\r\n      if (this.state.speed === \"50\") {\r\n        let newMatrix = [];\r\n        newMatrix = JSON.parse(JSON.stringify(matrices[\"easy\"]));\r\n        this.setState({ matrix: newMatrix }, () => this.recursion(0, 0));\r\n        window.$flag = false;\r\n        break;\r\n      }\r\n      if (row > 8) {\r\n        break;\r\n      }\r\n\r\n      let value = visualizer(\r\n        row,\r\n        col,\r\n        this.state.matrix,\r\n        this.state.staticValues\r\n      );\r\n\r\n      if (value === 0) {\r\n        let newMatrix = [...this.state.matrix];\r\n        newMatrix[row][col] = value;\r\n        this.setState(\r\n          { matrix: newMatrix },\r\n          await sleep(50 - this.state.speed)\r\n        );\r\n        while (true) {\r\n          if (col === 0) {\r\n            row -= 1;\r\n            col = 8;\r\n          } else {\r\n            col -= 1;\r\n          }\r\n          var temp = String(row) + String(col);\r\n          if (!(temp in this.state.staticValues)) {\r\n            break;\r\n          }\r\n        }\r\n        if (row < 0 && col < 0) {\r\n          alert(\"No solutions possible\");\r\n          break;\r\n        }\r\n      } else if (value === -1) {\r\n        if (col === 8) {\r\n          row += 1;\r\n          col = 0;\r\n        } else {\r\n          col += 1;\r\n        }\r\n      } else {\r\n        let newMatrix = [...this.state.matrix];\r\n        newMatrix[row][col] = value;\r\n        this.setState(\r\n          { matrix: newMatrix },\r\n          await sleep(50 - this.state.speed)\r\n        );\r\n\r\n        if (col === 8) {\r\n          row += 1;\r\n          col = 0;\r\n        } else {\r\n          col += 1;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.level !== this.props.level) {\r\n      let newMatrix = [];\r\n      newMatrix = JSON.parse(JSON.stringify(matrices[\"easy\"]));\r\n      this.setState({ matrix: newMatrix }, () => {\r\n        this.setStaticValues();\r\n      });\r\n      this.setState({ backgroundColor: WHITE_COLOR }, () => {});\r\n    }\r\n  }\r\n\r\n  setStaticValues() {\r\n    let staticValues = {};\r\n    for (let r = 0; r < this.state.matrix.length; r++) {\r\n      for (let c = 0; c < this.state.matrix[r].length; c++) {\r\n        if (this.state.matrix[r][c] !== 0) {\r\n          let newString = \"\";\r\n          newString += String(r) + String(c);\r\n          staticValues[newString] = 1;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ staticValues: staticValues }, () => {});\r\n  }\r\n\r\n  componentWillMount() {\r\n    let startmatrix = JSON.parse(JSON.stringify(matrices[\"easy\"]));\r\n    this.setState({ matrix: startmatrix }, () => {\r\n      this.setStaticValues();\r\n    });\r\n    this.setState({ backgroundColor: WHITE_COLOR });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {\" \"}\r\n        <div\r\n          className=\"justify-content-center\"\r\n          style={{\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"inline\" }}>\r\n            <p\r\n              style={{\r\n                display: \"inline\",\r\n              }}\r\n              className=\"mt-3 mr-3\"\r\n            >\r\n              Speed slider:\r\n            </p>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"50\"\r\n              defaultValue=\"25\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"h1\" style={{ display: \"inline\" }}>\r\n            <input\r\n              className=\"btn rounded-circle h1 btn-outline-success mt-3 p-2 ml-5 font-weight-bold\"\r\n              type=\"button\"\r\n              disabled={this.state.button}\r\n              onClick={() => this.startSolving()}\r\n              value=\"Solve\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"mt-3\">\r\n              <table>\r\n                <tbody>\r\n                  {this.state.matrix.map((rows, r) => (\r\n                    <Row\r\n                      key={r}\r\n                      row={rows}\r\n                      backgroundColor={this.state.backgroundColor}\r\n                      rIndex={r}\r\n                      staticValues={this.state.staticValues}\r\n                    />\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GridNew;\r\n","import React, { Component } from \"react\";\r\nimport Row from \"../Components/Row\";\r\nimport { matrices } from \"../utils/data\";\r\nimport {\r\n  gridChecker,\r\n  columnChecker,\r\n  rowChecker,\r\n  sleep,\r\n  visualizer,\r\n} from \"../utils/GridUtils.jsx\";\r\n\r\nwindow.$flag = false;\r\n\r\nconst WHITE_COLOR = \"#FFFFFF\";\r\n\r\nclass GridNew extends Component {\r\n  state = {\r\n    matrix: [[]],\r\n    backgroundColor: \"\",\r\n    staticValues: {},\r\n    speed: 25,\r\n    button: false,\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ speed: e.target.value });\r\n  };\r\n\r\n  recursion = (row, column) => {\r\n    var rowColIndex = String(row) + String(column);\r\n    if (rowColIndex in this.state.staticValues) {\r\n      this.recursion(row, column + 1);\r\n    } else {\r\n      if (row < 9 && column < 9) {\r\n        for (let x = 1; x < 10; x++) {\r\n          if (\r\n            gridChecker(row, column, x, this.state.matrix) &&\r\n            rowChecker(row, x, this.state.matrix) &&\r\n            columnChecker(column, x, this.state.matrix)\r\n          ) {\r\n            let newMatrix = [...this.state.matrix];\r\n            newMatrix[row][column] = x;\r\n            this.setState({ matrix: newMatrix });\r\n            this.recursion(row, column + 1);\r\n          }\r\n        }\r\n        if (!window.$flag) {\r\n          let newMatrix = [...this.state.matrix];\r\n          newMatrix[row][column] = 0;\r\n          this.setState({ matrix: newMatrix });\r\n        }\r\n      } else if (column >= 9) {\r\n        this.recursion(row + 1, 0);\r\n      } else {\r\n        window.$flag = true;\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  startSolving = async () => {\r\n    this.setState({ button: true });\r\n    let row = 0;\r\n    let col = 0;\r\n\r\n    while (true) {\r\n      if (this.state.speed === \"50\") {\r\n        let newMatrix = [];\r\n        newMatrix = JSON.parse(JSON.stringify(matrices[\"medium\"]));\r\n        this.setState({ matrix: newMatrix }, () => this.recursion(0, 0));\r\n        window.$flag = false;\r\n        break;\r\n      }\r\n      if (row > 8) {\r\n        break;\r\n      }\r\n\r\n      let value = visualizer(\r\n        row,\r\n        col,\r\n        this.state.matrix,\r\n        this.state.staticValues\r\n      );\r\n\r\n      if (value === 0) {\r\n        let newMatrix = [...this.state.matrix];\r\n        newMatrix[row][col] = value;\r\n        this.setState(\r\n          { matrix: newMatrix },\r\n          await sleep(50 - this.state.speed)\r\n        );\r\n        while (true) {\r\n          if (col === 0) {\r\n            row -= 1;\r\n            col = 8;\r\n          } else {\r\n            col -= 1;\r\n          }\r\n          var temp = String(row) + String(col);\r\n          if (!(temp in this.state.staticValues)) {\r\n            break;\r\n          }\r\n        }\r\n        if (row < 0 && col < 0) {\r\n          alert(\"No solutions possible\");\r\n          break;\r\n        }\r\n      } else if (value === -1) {\r\n        if (col === 8) {\r\n          row += 1;\r\n          col = 0;\r\n        } else {\r\n          col += 1;\r\n        }\r\n      } else {\r\n        let newMatrix = [...this.state.matrix];\r\n        newMatrix[row][col] = value;\r\n        this.setState(\r\n          { matrix: newMatrix },\r\n          await sleep(50 - this.state.speed)\r\n        );\r\n\r\n        if (col === 8) {\r\n          row += 1;\r\n          col = 0;\r\n        } else {\r\n          col += 1;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.level !== this.props.level) {\r\n      let newMatrix = [];\r\n      newMatrix = JSON.parse(JSON.stringify(matrices[\"medium\"]));\r\n      this.setState({ matrix: newMatrix }, () => {\r\n        this.setStaticValues();\r\n      });\r\n      this.setState({ backgroundColor: WHITE_COLOR });\r\n    }\r\n  }\r\n\r\n  setStaticValues() {\r\n    let staticValues = {};\r\n    for (let r = 0; r < this.state.matrix.length; r++) {\r\n      for (let c = 0; c < this.state.matrix[r].length; c++) {\r\n        if (this.state.matrix[r][c] !== 0) {\r\n          let newString = \"\";\r\n          newString += String(r) + String(c);\r\n          staticValues[newString] = 1;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ staticValues: staticValues }, () => {});\r\n  }\r\n\r\n  componentWillMount() {\r\n    let startmatrix = JSON.parse(JSON.stringify(matrices[\"medium\"]));\r\n    this.setState({ matrix: startmatrix }, () => {\r\n      this.setStaticValues();\r\n    });\r\n    this.setState({ backgroundColor: WHITE_COLOR });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {\" \"}\r\n        <div\r\n          className=\"justify-content-center\"\r\n          style={{\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"inline\" }}>\r\n            <p\r\n              style={{\r\n                display: \"inline\",\r\n              }}\r\n              className=\"mt-3 mr-3\"\r\n            >\r\n              Speed slider:\r\n            </p>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"50\"\r\n              defaultValue=\"25\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"h1\" style={{ display: \"inline\" }}>\r\n            <input\r\n              className=\"btn rounded-circle h1 btn-outline-success mt-3 p-2 ml-5 font-weight-bold\"\r\n              type=\"button\"\r\n              disabled={this.state.button}\r\n              onClick={() => this.startSolving()}\r\n              value=\"Solve\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"mt-3\">\r\n              <table>\r\n                <tbody>\r\n                  {this.state.matrix.map((rows, r) => (\r\n                    <Row\r\n                      key={r}\r\n                      row={rows}\r\n                      backgroundColor={this.state.backgroundColor}\r\n                      rIndex={r}\r\n                      staticValues={this.state.staticValues}\r\n                    />\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GridNew;\r\n","import React, { Component } from \"react\";\r\nimport Row from \"../Components/Row\";\r\nimport { matrices } from \"../utils/data\";\r\nimport {\r\n  gridChecker,\r\n  columnChecker,\r\n  rowChecker,\r\n  sleep,\r\n  visualizer,\r\n} from \"../utils/GridUtils.jsx\";\r\n\r\nwindow.$flag = false;\r\n\r\nconst WHITE_COLOR = \"#FFFFFF\";\r\n\r\nclass GridNew extends Component {\r\n  state = {\r\n    matrix: [[]],\r\n    backgroundColor: \"\",\r\n    staticValues: {},\r\n    speed: 25,\r\n    button: false,\r\n  };\r\n\r\n  recursion = (row, column) => {\r\n    var rowColIndex = String(row) + String(column);\r\n    if (rowColIndex in this.state.staticValues) {\r\n      this.recursion(row, column + 1);\r\n    } else {\r\n      if (row < 9 && column < 9) {\r\n        for (let x = 1; x < 10; x++) {\r\n          if (\r\n            gridChecker(row, column, x, this.state.matrix) &&\r\n            rowChecker(row, x, this.state.matrix) &&\r\n            columnChecker(column, x, this.state.matrix)\r\n          ) {\r\n            let newMatrix = [...this.state.matrix];\r\n            newMatrix[row][column] = x;\r\n            this.setState({ matrix: newMatrix });\r\n            this.recursion(row, column + 1);\r\n          }\r\n        }\r\n        if (!window.$flag) {\r\n          let newMatrix = [...this.state.matrix];\r\n          newMatrix[row][column] = 0;\r\n          this.setState({ matrix: newMatrix });\r\n        }\r\n      } else if (column >= 9) {\r\n        this.recursion(row + 1, 0);\r\n      } else {\r\n        window.$flag = true;\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ speed: e.target.value });\r\n  };\r\n\r\n  startSolving = async () => {\r\n    this.setState({ button: true });\r\n    let row = 0;\r\n    let col = 0;\r\n\r\n    while (true) {\r\n      if (this.state.speed === \"50\") {\r\n        let newMatrix = [];\r\n        newMatrix = JSON.parse(JSON.stringify(matrices[\"hard\"]));\r\n        this.setState({ matrix: newMatrix }, () => this.recursion(0, 0));\r\n        window.$flag = false;\r\n        break;\r\n      }\r\n      if (row > 8) {\r\n        break;\r\n      }\r\n\r\n      let value = visualizer(\r\n        row,\r\n        col,\r\n        this.state.matrix,\r\n        this.state.staticValues\r\n      );\r\n\r\n      if (value === 0) {\r\n        let newMatrix = [...this.state.matrix];\r\n        newMatrix[row][col] = value;\r\n        this.setState(\r\n          { matrix: newMatrix },\r\n          await sleep(50 - this.state.speed)\r\n        );\r\n        while (true) {\r\n          if (col === 0) {\r\n            row -= 1;\r\n            col = 8;\r\n          } else {\r\n            col -= 1;\r\n          }\r\n          var temp = String(row) + String(col);\r\n          if (!(temp in this.state.staticValues)) {\r\n            break;\r\n          }\r\n        }\r\n        if (row < 0 && col < 0) {\r\n          alert(\"No solutions possible\");\r\n          break;\r\n        }\r\n      } else if (value === -1) {\r\n        if (col === 8) {\r\n          row += 1;\r\n          col = 0;\r\n        } else {\r\n          col += 1;\r\n        }\r\n      } else {\r\n        let newMatrix = [...this.state.matrix];\r\n        newMatrix[row][col] = value;\r\n        this.setState(\r\n          { matrix: newMatrix },\r\n          await sleep(50 - this.state.speed)\r\n        );\r\n\r\n        if (col === 8) {\r\n          row += 1;\r\n          col = 0;\r\n        } else {\r\n          col += 1;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.level !== this.props.level) {\r\n      let newMatrix = [];\r\n      newMatrix = JSON.parse(JSON.stringify(matrices[\"hard\"]));\r\n      this.setState({ matrix: newMatrix }, () => {\r\n        this.setStaticValues();\r\n      });\r\n      this.setState({ backgroundColor: WHITE_COLOR });\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ speed: e.target.value });\r\n  };\r\n\r\n  setStaticValues() {\r\n    let staticValues = {};\r\n    for (let r = 0; r < this.state.matrix.length; r++) {\r\n      for (let c = 0; c < this.state.matrix[r].length; c++) {\r\n        if (this.state.matrix[r][c] !== 0) {\r\n          let newString = \"\";\r\n          newString += String(r) + String(c);\r\n          staticValues[newString] = 1;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ staticValues: staticValues });\r\n  }\r\n\r\n  componentWillMount() {\r\n    let startmatrix = JSON.parse(JSON.stringify(matrices[\"hard\"]));\r\n    this.setState({ matrix: startmatrix }, () => {\r\n      this.setStaticValues();\r\n    });\r\n    this.setState({ backgroundColor: WHITE_COLOR });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {\" \"}\r\n        <div\r\n          className=\"justify-content-center\"\r\n          style={{\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"inline\" }}>\r\n            <p\r\n              style={{\r\n                display: \"inline\",\r\n              }}\r\n              className=\"mt-3 mr-3\"\r\n            >\r\n              Speed slider:\r\n            </p>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"50\"\r\n              defaultValue=\"25\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"h1\" style={{ display: \"inline\" }}>\r\n            <input\r\n              className=\"btn rounded-circle h1 btn-outline-success mt-3 p-2 ml-5 font-weight-bold\"\r\n              type=\"button\"\r\n              disabled={this.state.button}\r\n              onClick={() => this.startSolving()}\r\n              value=\"Solve\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"mt-3\">\r\n              <table>\r\n                <tbody>\r\n                  {this.state.matrix.map((rows, r) => (\r\n                    <Row\r\n                      key={r}\r\n                      row={rows}\r\n                      backgroundColor={this.state.backgroundColor}\r\n                      rIndex={r}\r\n                      staticValues={this.state.staticValues}\r\n                    />\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GridNew;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch, Link } from \"react-router-dom\";\r\nimport EasyGrid from \"./EasyGrid\";\r\nimport MediumGrid from \"./MediumGrid\";\r\nimport HardGrid from \"./HardGrid\";\r\n\r\nclass Navbar extends React.Component {\r\n  state = {\r\n    level: \"easy\",\r\n    speed: 0,\r\n  };\r\n\r\n  buttonSelector = (e) => {\r\n    this.setState({ level: e.target.value });\r\n  };\r\n\r\n  // btn nav-item col-4 btn-outline-success\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <nav className=\"navbar mt-5 navbar-expand-lg navbar-dark justify-content-center  bg-dark\">\r\n            <ul className=\"navbar-nav  \">\r\n              <Link to={\"/\"}>\r\n                <li className=\"nav-item text-success nav-link\">Easy</li>\r\n              </Link>\r\n\r\n              <Link to={\"/medium\"}>\r\n                <li className=\"nav-item text-success nav-link\">Medium</li>\r\n              </Link>\r\n\r\n              <Link to={\"/hard\"}>\r\n                <li className=\"nav-item  text-success nav-link\">Hard</li>\r\n              </Link>\r\n            </ul>\r\n          </nav>\r\n          <Switch>\r\n            <Route exact path={\"/\"} component={EasyGrid}></Route>\r\n            <Route exact path={\"/medium\"} component={MediumGrid}></Route>\r\n            <Route exact path={\"/hard\"} component={HardGrid}></Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport Navbar from \"./Components/Navbar\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}